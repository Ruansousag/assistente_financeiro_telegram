import sqlite3
import logging
from datetime import datetime
from dateutil.relativedelta import relativedelta
import calendar
import matplotlib.pyplot as plt
import seaborn as sns
import pandas as pd
from io import BytesIO, StringIO
import random
import locale
import threading
import os
from flask import Flask, render_template_string, jsonify
import pytz

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, BotCommand
from telegram.ext import Application, CommandHandler, MessageHandler, filters, CallbackQueryHandler, ContextTypes

# --- CONFIGURA√á√ÉO INICIAL ---
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO)

# Dicion√°rio de tradu√ß√£o dos meses
meses = {
    'January': 'Janeiro',
    'February': 'Fevereiro',
    'March': 'Mar√ßo',
    'April': 'Abril',
    'May': 'Maio',
    'June': 'Junho',
    'July': 'Julho',
    'August': 'Agosto',
    'September': 'Setembro',
    'October': 'Outubro',
    'November': 'Novembro',
    'December': 'Dezembro'
}

# COLOQUE O TOKEN DO SEU BOT AQUI
TOKEN = "8116373945:AAHB-Cgn7Gx6GIWT3J17k9qttoPjP9i7zUg"

# COLOQUE OS IDs DE USU√ÅRIO DO TELEGRAM AUTORIZADOS AQUI
AUTHORIZED_USERS = [7047256417, 8314716058]

# Define o fuso hor√°rio do Brasil
BRAZIL_TZ = pytz.timezone('America/Sao_Paulo')

# Fun√ß√£o para obter a data e hora atual no fuso hor√°rio do Brasil
def get_brazil_now():
    return datetime.now(BRAZIL_TZ)

# --- SERVIDOR WEB FLASK ---
app = Flask(__name__)


@app.route('/')
def home():
    return render_template_string('''
    <!DOCTYPE html>
    <html>
    <head>
        <title>Bot Financeiro - Status</title>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <style>
            body {
                font-family: Arial, sans-serif;
                margin: 0;
                padding: 20px;
                background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
                color: white;
                min-height: 100vh;
            }
            .container {
                max-width: 600px;
                margin: 0 auto;
                background: rgba(255,255,255,0.1);
                padding: 30px;
                border-radius: 15px;
                backdrop-filter: blur(10px);
                box-shadow: 0 8px 32px rgba(0, 0, 0, 0.1);
            }
            .status {
                text-align: center;
                padding: 20px;
                background: rgba(0, 255, 0, 0.2);
                border-radius: 10px;
                margin: 20px 0;
            }
            .info {
                background: rgba(255,255,255,0.1);
                padding: 15px;
                border-radius: 8px;
                margin: 10px 0;
            }
            h1 { text-align: center;
                margin-bottom: 30px; }
            .emoji { font-size: 2em; margin: 10px;
            }
        </style>
    </head>
    <body>
        <div class="container">
            <h1>ü§ñ Bot Assistente Financeiro</h1>

            <div class="status">
                <div class="emoji">‚úÖ</div>
                <h2>Bot Online e Funcionando!</h2>
                <p>Status: <strong>Ativo</strong></p>
                <p>√öltima verifica√ß√£o: <span id="timestamp"></span></p>
            </div>

            <div class="info">
                <h3>üìä Funcionalidades</h3>
                <ul>
                    <li>üí∏ Registro de despesas</li>
                    <li>üí∞ Registro de receitas</li>
                    <li>üéØ Controle de or√ßamentos</li>
                    <li>üìà Relat√≥rios detalhados</li>
                    <li>üìã Extratos mensais</li>
                </ul>
            </div>

            <div class="info">
                <h3>üîß Como usar</h3>
                <p>Envie <code>/start</code> no Telegram para come√ßar a usar o bot!</p>
            </div>
        </div>

        <script>
            function updateTimestamp() {
                document.getElementById('timestamp').textContent = new Date().toLocaleString('pt-BR');
            }
            updateTimestamp();
            setInterval(updateTimestamp, 1000);
        </script>
    </body>
    </html>
    ''')


@app.route('/status')
def status():
    return jsonify({
        'status': 'online',
        'bot': 'financial_assistant',
        'timestamp': datetime.now().isoformat(),
        'version': '13.3'
    })


@app.route('/health')
def health():
    return jsonify({'status': 'healthy'})


# --- FUN√á√ïES AUXILIARES ---
def format_brl(value):
    if not isinstance(value, (int, float)):
        return "R$ 0,00"
    try:
        return f"R$ {value:,.2f}".replace(",",
                                           "X").replace(".",
                                                          ",").replace("X", ".")
    except locale.Error:
        return f"R$ {value:.2f}".replace('.', ',')


def format_date_br(date_str):
    try:
        return datetime.strptime(date_str, '%Y-%m-%d').strftime('%d/%m/%Y')
    except (ValueError, TypeError):
        return date_str


def get_previous_month(year, month):
    current_date = datetime(year, month, 1)
    prev_date = current_date - relativedelta(months=1)
    return prev_date.year, prev_date.month


def calc_percent_change(current, previous):
    if previous == 0:
        return " (Novo)" if current > 0 else ""
    change = ((current - previous) / previous) * 100
    return f" ({'+' if change >= 0 else ''}{change:.1f}%)"


# --- CLASSE DE GERENCIAMENTO DO BANCO DE DADOS ---
class FinancialBotDB:

    def __init__(self, db_name='financeiro.db'):
        self.db_name = db_name
        self.init_database()

    def _get_connection(self):
        return sqlite3.connect(self.db_name)

    def init_database(self):
        with self._get_connection() as conn:
            cursor = conn.cursor()
            cursor.execute('''
                CREATE TABLE IF NOT EXISTS transacoes (
                    id INTEGER PRIMARY KEY AUTOINCREMENT, user_id INTEGER, tipo TEXT,
                    categoria TEXT, valor REAL, descricao TEXT, data DATE,
                    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                )
            ''')
            cursor.execute('''
                CREATE TABLE IF NOT EXISTS orcamentos (
                    id INTEGER PRIMARY KEY AUTOINCREMENT, categoria TEXT NOT NULL,
                    valor_limite REAL NOT NULL, mes INTEGER NOT NULL, ano INTEGER NOT NULL,
                    UNIQUE(categoria, mes, ano)
                )
            ''')
            cursor.execute('''
                CREATE TABLE IF NOT EXISTS categorias (
                    id INTEGER PRIMARY KEY AUTOINCREMENT, nome TEXT UNIQUE,
                    tipo TEXT, icone TEXT
                )
            ''')
            cursor.execute("SELECT COUNT(*) FROM categorias")
            if cursor.fetchone()[0] == 0:
                categorias_default = [('Sal√°rio', 'receita', 'üí∞'),
                                      ('Freelance', 'receita', 'üíª'),
                                      ('Investimentos', 'receita', 'üìà'),
                                      ('Mercado', 'despesa', 'üõí'),
                                      ('Sa√∫de', 'despesa', 'üè•'),
                                      ('Casa', 'despesa', 'üè†'),
                                      ('Aluguel', 'despesa', 'üèòÔ∏è'),
                                      ('Lazer', 'despesa', 'üéâ'),
                                      ('Cart√£o', 'despesa', 'üí≥'),
                                      ('Transporte', 'despesa', 'üöó'),
                                      ('Educa√ß√£o', 'despesa', 'üìö'),
                                      ('Diversos', 'ambos', 'üì¶')]
                cursor.executemany(
                    'INSERT INTO categorias (nome, tipo, icone) VALUES (?, ?, ?)',
                    categorias_default)
            conn.commit()

    def zerar_dados(self):
        with self._get_connection() as conn:
            cursor = conn.cursor()
            cursor.execute("DELETE FROM transacoes")
            cursor.execute("DELETE FROM orcamentos")
            conn.commit()

    def get_categorias(self, tipo=None):
        with self._get_connection() as conn:
            cursor = conn.cursor()
            query = "SELECT nome, icone FROM categorias WHERE tipo = ? OR tipo = 'ambos' ORDER BY nome" if tipo else "SELECT nome, icone FROM categorias ORDER BY nome"
            cursor.execute(query, (tipo, ) if tipo else ())
            return cursor.fetchall()

    def add_transacao(self, user_id, tipo, categoria, valor, descricao, data):
        with self._get_connection() as conn:
            cursor = conn.cursor()
            cursor.execute(
                "INSERT INTO transacoes (user_id, tipo, categoria, valor, descricao, data) VALUES (?, ?, ?, ?, ?, ?)",
                (user_id, tipo, categoria, float(valor), descricao, data))
            conn.commit()
            return cursor.lastrowid

    def get_orcamento_status(self, categoria, mes, ano):
        with self._get_connection() as conn:
            cursor = conn.cursor()
            cursor.execute(
                'SELECT valor_limite FROM orcamentos WHERE categoria = ? AND mes = ? AND ano = ?',
                (categoria, mes, ano))
            orcamento = cursor.fetchone()
            if not orcamento:
                return None, 0, 0, 0
            limite = orcamento[0]
            cursor.execute(
                "SELECT COALESCE(SUM(valor), 0) FROM transacoes WHERE categoria = ? AND tipo = 'despesa' AND strftime('%Y-%m', data) = ?",
                (categoria, f"{ano:04d}-{mes:02d}"))
            gasto_atual = cursor.fetchone()[0]
            disponivel = limite - gasto_atual
            percentual_usado = (gasto_atual /
                                limite) * 100 if limite > 0 else 0
            return limite, gasto_atual, disponivel, percentual_usado

    def set_orcamento(self, categoria, valor_limite, mes, ano):
        with self._get_connection() as conn:
            cursor = conn.cursor()
            cursor.execute(
                "INSERT INTO orcamentos (categoria, valor_limite, mes, ano) VALUES (?, ?, ?, ?) ON CONFLICT(categoria, mes, ano) DO UPDATE SET valor_limite = excluded.valor_limite",
                (categoria, float(valor_limite), mes, ano))
            conn.commit()

    def get_todos_orcamentos(self, mes, ano):
        with self._get_connection() as conn:
            cursor = conn.cursor()
            cursor.execute(
                "SELECT categoria, valor_limite FROM orcamentos WHERE mes = ? AND ano = ? ORDER BY categoria",
                (mes, ano))
            return cursor.fetchall()

    def get_transacoes_por_categoria(self, categoria, mes, ano):
        with self._get_connection() as conn:
            cursor = conn.cursor()
            cursor.execute(
                "SELECT data, descricao, valor FROM transacoes WHERE categoria = ? AND tipo = 'despesa' AND strftime('%Y-%m', data) = ? ORDER BY data",
                (categoria, f"{ano:04d}-{mes:02d}"))
            return cursor.fetchall()

    def gerar_relatorio_mensal(self, mes, ano, detalhado=False):
        with self._get_connection() as conn:
            periodo_str = f"{ano:04d}-{mes:02d}"
            query = "SELECT data, categoria, descricao, tipo, valor, user_id FROM transacoes WHERE strftime('%Y-%m', data) = ? ORDER BY data" if detalhado else "SELECT categoria, tipo, SUM(valor) as total FROM transacoes WHERE strftime('%Y-%m', data) = ? GROUP BY categoria, tipo"
            return pd.read_sql_query(query, conn, params=[periodo_str])

    def get_ultimos_lancamentos(self, limit=7):
        with self._get_connection() as conn:
            cursor = conn.cursor()
            cursor.execute(
                "SELECT id, data, tipo, categoria, descricao, valor, user_id FROM transacoes ORDER BY id DESC LIMIT ?",
                (limit, ))
            return cursor.fetchall()

    def get_transacao(self, tx_id):
        with self._get_connection() as conn:
            cursor = conn.cursor()
            cursor.execute("SELECT * FROM transacoes WHERE id = ?", (tx_id, ))
            return cursor.fetchone()

    def update_transacao_valor(self, tx_id, novo_valor):
        with self._get_connection() as conn:
            cursor = conn.cursor()
            try:
                cursor.execute("UPDATE transacoes SET valor = ? WHERE id = ?",
                               (novo_valor, tx_id))
                conn.commit()
                return cursor.rowcount > 0
            except Exception as e:
                logging.error(f"Erro ao atualizar transa√ß√£o {tx_id}: {e}")
                return False


db = FinancialBotDB()


# --- FUN√á√ïES DE L√ìGICA E VISUALIZA√á√ÉO ---
def get_alerta_divertido(categoria, percentual_usado):
    alertas = {
        50: [f"ü§î Metade do or√ßamento de *{categoria}* j√° foi..."],
        80: [f"üö® Cuidado! 80% do or√ßamento de *{categoria}* foi utilizado!"],
        100: [f"üÜò Or√ßamento de *{categoria}* estourado!"]
    }
    nivel = next((n for n in [100, 80, 50] if percentual_usado >= n), 0)
    return random.choice(alertas[nivel]) if nivel else None


def criar_relatorio_visual(df, mes, ano):
    if df.empty:
        return None
    receitas = df[df['tipo'] == 'receita']['total'].sum()
    despesas = df[df['tipo'] == 'despesa']['total'].sum()
    saldo = receitas - despesas
    nome_mes_ano = f"{meses[calendar.month_name[mes]].capitalize()}/{ano}"

    plt.style.use('seaborn-v0_8-whitegrid')
    fig, axes = plt.subplots(2, 2, figsize=(16, 12))
    fig.suptitle(f'Relat√≥rio Financeiro - {nome_mes_ano}',
                 fontsize=20,
                 weight='bold')

    despesas_cat = df[df['tipo'] == 'despesa']
    if not despesas_cat.empty:
        axes[0, 0].pie(despesas_cat['total'],
                       labels=despesas_cat['categoria'],
                       autopct='%1.1f%%',
                       startangle=140,
                       colors=sns.color_palette("Reds_r", len(despesas_cat)))
        axes[0, 0].set_title('Composi√ß√£o das Despesas', fontsize=14)
    else:
        axes[0, 0].text(0.5,
                        0.5,
                        'Sem despesas',
                        ha='center',
                        va='center',
                        fontsize=14)
        axes[0, 0].set_title('Composi√ß√£o das Despesas', fontsize=14)

    receitas_cat = df[df['tipo'] == 'receita']
    if not receitas_cat.empty:
        axes[0, 1].pie(receitas_cat['total'],
                       labels=receitas_cat['categoria'],
                       autopct='%1.1f%%',
                       startangle=140,
                       colors=sns.color_palette("Greens_r", len(receitas_cat)))
        axes[0, 1].set_title('Composi√ß√£o das Receitas', fontsize=14)
    else:
        axes[0, 1].text(0.5,
                        0.5,
                        'Sem receitas',
                        ha='center',
                        va='center',
                        fontsize=14)
        axes[0, 1].set_title('Composi√ß√£o das Receitas', fontsize=14)

    cores = ['green', 'red', 'blue' if saldo >= 0 else 'orange']
    sns.barplot(x=['Receitas', 'Despesas', 'Saldo'],
                y=[receitas, despesas, saldo],
                ax=axes[1, 0],
                palette=cores)
    axes[1, 0].set_title('Resumo Financeiro do M√™s', fontsize=14)
    axes[1, 0].set_ylabel('Valor (R$)')
    for p in axes[1, 0].patches:
        axes[1, 0].annotate(format_brl(p.get_height()),
                            (p.get_x() + p.get_width() / 2., p.get_height()),
                            ha='center',
                            va='center',
                            xytext=(0, 9),
                            textcoords='offset points')

    top_despesas = despesas_cat.sort_values('total', ascending=False).head(5)
    if not top_despesas.empty:
        sns.barplot(x='total',
                    y='categoria',
                    data=top_despesas,
                    ax=axes[1, 1],
                    palette='Reds_r',
                    orient='h')
        axes[1, 1].set_title('Top 5 Despesas', fontsize=14)
        axes[1, 1].set_xlabel('Valor (R$)')
        axes[1, 1].set_ylabel('')
    else:
        axes[1, 1].axis('off')
        axes[1, 1].text(0.5,
                        0.5,
                        'Sem despesas\npara o ranking',
                        ha='center',
                        va='center',
                        fontsize=12)

    plt.tight_layout(rect=[0, 0, 1, 0.96])
    buffer = BytesIO()
    plt.savefig(buffer, format='png', dpi=300)
    buffer.seek(0)
    plt.close()
    return buffer


def criar_relatorio_detalhado(df, mes, ano):
    if df.empty:
        return None
    df_sorted = df.sort_values(by='tipo', ascending=False)
    nome_mes_ano = f"{meses[calendar.month_name[mes]].capitalize()}/{ano}"
    buffer = StringIO()
    buffer.write(f"Relat√≥rio Detalhado - {nome_mes_ano}\n{'='*50}\n\n")
    for _, row in df_sorted.iterrows():
        sinal = '+' if row['tipo'] == 'receita' else '-'
        buffer.write(
            f"Data: {format_date_br(row['data'])}\nTipo: {row['tipo'].capitalize()}\nCategoria: {row['categoria']}\n"
        )
        buffer.write(
            f"Descri√ß√£o: {row['descricao']}\nValor: {sinal}{format_brl(row['valor']).replace('R$ ', '')}\n{'-'*30}\n"
        )
    buffer.seek(0)
    return buffer


def criar_relatorio_comparativo(df_atual, df_anterior, mes_atual, ano_atual,
                                mes_anterior, ano_anterior):
    rec_atual = df_atual[df_atual['tipo'] == 'receita']['total'].sum()
    desp_atual = df_atual[df_atual['tipo'] == 'despesa']['total'].sum()
    rec_anterior = df_anterior[df_anterior['tipo'] == 'receita']['total'].sum()
    desp_anterior = df_anterior[df_anterior['tipo'] ==
                                'despesa']['total'].sum()
    despesas_atual_cat = df_atual[df_atual['tipo'] == 'despesa'].set_index(
        'categoria')['total']
    despesas_anterior_cat = df_anterior[
        df_anterior['tipo'] == 'despesa'].set_index('categoria')['total']
    df_comp = pd.concat([despesas_atual_cat, despesas_anterior_cat],
                        axis=1,
                        keys=['atual', 'anterior']).fillna(0)
    df_comp['variacao'] = df_comp['atual'] - df_comp['anterior']
    fig, ax = plt.subplots(figsize=(12, 8))
    df_comp[['anterior', 'atual'
             ]].sort_values(by='atual',
                            ascending=True).plot(kind='barh',
                                                 ax=ax,
                                                 color=['#ff9999', '#ff4d4d'])
    ax.set_title(
        f"Comparativo de Despesas: {meses[calendar.month_name[mes_anterior]].capitalize()} vs {meses[calendar.month_name[mes_atual]].capitalize()}",
        fontsize=16)
    ax.set_xlabel('Valor (R$)')
    ax.set_ylabel('Categorias')
    ax.legend(['M√™s Anterior', 'M√™s Atual'])
    plt.tight_layout()
    buffer = BytesIO()
    plt.savefig(buffer, format='png', dpi=300)
    buffer.seek(0)
    plt.close()
    caption = (
        f"üìä *Comparativo Mensal*\n\n"
        f"*{'‚îÄ'*10} Resumo Geral {'‚îÄ'*10}*\n"
        f"üí∞ Receitas: {format_brl(rec_atual)}{calc_percent_change(rec_atual, rec_anterior)}\n"
        f"üí∏ Despesas: {format_brl(desp_atual)}{calc_percent_change(desp_atual, desp_anterior)}\n"
        f"*{'üíö Saldo' if (rec_atual - desp_atual) >= 0 else '‚ù§Ô∏è Saldo'}: {format_brl(rec_atual - desp_atual)}*\n\n"
        f"*{'‚îÄ'*10} An√°lise das Despesas {'‚îÄ'*10}*\n")
    top_aumentos = df_comp[df_comp['variacao'] > 0].sort_values(
        'variacao', ascending=False).head(3)
    if not top_aumentos.empty:
        caption += "üìà *Principais Aumentos:*\n"
        for cat, row in top_aumentos.iterrows():
            caption += f"  ‚Ä¢ *{cat}*: +{format_brl(row['variacao'])}{calc_percent_change(row['atual'], row['anterior'])}\n"
    return buffer, caption


# --- FUN√á√ïES DE MENU E NAVEGA√á√ÉO ---
async def show_main_menu(update: Update,
                         context: ContextTypes.DEFAULT_TYPE,
                         message_id=None):
    keyboard = [[
        InlineKeyboardButton("üí∏ Nova Despesa", callback_data="add_despesa"),
        InlineKeyboardButton("üí∞ Nova Receita", callback_data="add_receita")
    ],
                [
                    InlineKeyboardButton("üìä Relat√≥rios",
                                         callback_data="relatorios"),
                    InlineKeyboardButton("üéØ Or√ßamentos",
                                         callback_data="orcamentos")
                ],
                [
                    InlineKeyboardButton("üìã Saldo do M√™s",
                                         callback_data="saldo"),
                    InlineKeyboardButton("üìù √öltimos Lan√ßamentos",
                                         callback_data="extrato")
                ]]
    text = "üè† *Menu Principal*\n\nO que vamos organizar agora?"
    chat_id = update.effective_chat.id
    if message_id:
        try:
            await context.bot.edit_message_text(
                chat_id=chat_id,
                message_id=message_id,
                text=text,
                reply_markup=InlineKeyboardMarkup(keyboard),
                parse_mode='Markdown')
        except Exception:
            await context.bot.send_message(
                chat_id=chat_id,
                text=text,
                reply_markup=InlineKeyboardMarkup(keyboard),
                parse_mode='Markdown')
    else:
        await context.bot.send_message(
            chat_id=chat_id,
            text=text,
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode='Markdown')


# --- HANDLERS DE COMANDOS E BOT√ïES ---
async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    if user.id not in AUTHORIZED_USERS:
        await update.message.reply_text(
            "‚ùå Desculpe, voc√™ n√£o tem permiss√£o para usar este bot.")
        return
    await update.message.delete()
    await show_main_menu(update, context)


async def zerar_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.delete()
    keyboard = [[
        InlineKeyboardButton("üóëÔ∏è SIM, APAGAR TUDO!",
                             callback_data="confirmar_zerar")
    ], [InlineKeyboardButton("‚ùå Cancelar", callback_data="menu_principal")]]
    text = (
        "‚ö†Ô∏è *ATEN√á√ÉO!* ‚ö†Ô∏è\n\nVoc√™ tem certeza que quer apagar *TODOS* os dados?\n\n"
        "Isso ir√° remover permanentemente todas as receitas, despesas e or√ßamentos registrados.\n\n"
        "*ESTA A√á√ÉO N√ÉO PODE SER DESFEITA.*")
    await context.bot.send_message(chat_id=update.effective_chat.id,
                                   text=text,
                                   reply_markup=InlineKeyboardMarkup(keyboard),
                                   parse_mode='Markdown')


async def generic_button_handler(update: Update,
                                 context: ContextTypes.DEFAULT_TYPE):
    """
    Handler para a maioria dos bot√µes, exceto os de sele√ß√£o de data.
    """
    query = update.callback_query
    await query.answer()
    data = query.data

    if data == "menu_principal":
        await show_main_menu(update,
                             context,
                             message_id=query.message.message_id)
        return

    if data in ["add_despesa", "add_receita"]:
        tipo = data.split('_')[1]
        context.user_data.clear()
        context.user_data['tipo_transacao'] = tipo
        categorias = db.get_categorias(tipo)
        keyboard = [[
            InlineKeyboardButton(f"{icone} {nome}",
                                 callback_data=f"cat_{nome}")
        ] for nome, icone in categorias]
        keyboard.append([
            InlineKeyboardButton("‚¨ÖÔ∏è Voltar ao Menu",
                                 callback_data="menu_principal")
        ])
        await query.edit_message_text(
            f"Selecione a categoria da *{tipo}*:",
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode='Markdown')

    elif data.startswith("cat_"):
        context.user_data['message_id_to_edit'] = query.message.message_id
        categoria = data[4:]
        context.user_data['categoria_transacao'] = categoria
        context.user_data['step'] = 'valor_transacao'
        await query.edit_message_text(
            f"Categoria: *{categoria}*\n\nQual o valor?",
            parse_mode='Markdown')

    elif data == "saldo":
        hoje = get_brazil_now()
        df = db.gerar_relatorio_mensal(hoje.month, hoje.year)
        receitas = df[df['tipo'] ==
                      'receita']['total'].sum() if not df.empty else 0
        despesas = df[df['tipo'] ==
                      'despesa']['total'].sum() if not df.empty else 0
        texto = (
            f"üí≥ *Saldo de {meses[calendar.month_name[hoje.month]].capitalize()}*\n\n"
            f"üí∞ Receitas: {format_brl(receitas)}\n"
            f"üí∏ Despesas: {format_brl(despesas)}\n"
            f"*{'üíö Saldo Positivo' if (receitas - despesas) >= 0 else '‚ù§Ô∏è Saldo Negativo'}: {format_brl(receitas - despesas)}*"
        )
        keyboard = [[
            InlineKeyboardButton("‚¨ÖÔ∏è Voltar ao Menu",
                                 callback_data="menu_principal")
        ]]
        await query.edit_message_text(
            texto,
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode='Markdown')

    elif data == "extrato":
        lancamentos = db.get_ultimos_lancamentos()
        keyboard = [[
            InlineKeyboardButton("‚¨ÖÔ∏è Voltar ao Menu",
                                 callback_data="menu_principal")
        ]]
        if not lancamentos:
            texto = "Nenhum lan√ßamento encontrado ainda."
        else:
            texto = "üìù *√öltimos Lan√ßamentos:*\n\n"
            for tx_id, data_t, tipo, cat, desc, valor, user_id_lanc in lancamentos:
                emoji = "üí∏" if tipo == 'despesa' else "üí∞"
                texto += f"{emoji} _{format_date_br(data_t)}_ - *{cat}*\n"
                texto += f"   _{desc}_ - *{format_brl(valor)}*\n"

        await query.edit_message_text(
            texto,
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode='Markdown')

    elif data == "relatorios":
        keyboard = [[
            InlineKeyboardButton("üìä M√™s Atual (Gr√°fico)",
                                 callback_data="rel_grafico")
        ],
                    [
                        InlineKeyboardButton("üìÑ M√™s Atual (Detalhado)",
                                             callback_data="rel_detalhado")
                    ],
                    [
                        InlineKeyboardButton("üìà Comparativo Mensal",
                                             callback_data="rel_comparativo")
                    ],
                    [
                        InlineKeyboardButton("‚¨ÖÔ∏è Voltar ao Menu",
                                             callback_data="menu_principal")
                    ]]
        await query.edit_message_text(
            "Qual relat√≥rio voc√™ deseja gerar?",
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode='Markdown')

    elif data.startswith("rel_"):
        tipo_relatorio = data.split('_')[1]
        if tipo_relatorio == 'comparativo':
            await query.edit_message_text(
                "‚è≥ Gerando relat√≥rio comparativo, um momento...")
            hoje = get_brazil_now()
            ano_anterior, mes_anterior = get_previous_month(
                hoje.year, hoje.month)
            df_atual = db.gerar_relatorio_mensal(hoje.month, hoje.year)
            df_anterior = db.gerar_relatorio_mensal(mes_anterior, ano_anterior)
            if df_anterior.empty:
                await query.edit_message_text(
                    "Ainda n√£o h√° dados do m√™s anterior para comparar.",
                    reply_markup=InlineKeyboardMarkup([[
                        InlineKeyboardButton("‚¨ÖÔ∏è Voltar",
                                             callback_data="relatorios")
                    ]]))
                return
            buffer, caption = criar_relatorio_comparativo(
                df_atual, df_anterior, hoje.month, hoje.year, mes_anterior,
                ano_anterior)
            await context.bot.send_photo(chat_id=query.message.chat_id,
                                         photo=buffer,
                                         caption=caption,
                                         parse_mode='Markdown')
        else:
            detalhado = (tipo_relatorio == 'detalhado')
            hoje = get_brazil_now()
            await query.edit_message_text("‚è≥ Gerando relat√≥rio, um momento...")
            df = db.gerar_relatorio_mensal(hoje.month,
                                          hoje.year,
                                          detalhado=detalhado)
            if df.empty:
                await query.edit_message_text(
                    f"Nenhum dado encontrado para {meses[calendar.month_name[hoje.month]].capitalize()}.",
                    reply_markup=InlineKeyboardMarkup([[
                        InlineKeyboardButton("‚¨ÖÔ∏è Voltar",
                                             callback_data="relatorios")
                    ]]))
                return
            if detalhado:
                buffer = criar_relatorio_detalhado(df, hoje.month, hoje.year)
                await context.bot.send_document(
                    chat_id=query.message.chat_id,
                    document=buffer,
                    filename=f"relatorio_{hoje.year}_{hoje.month:02d}.txt",
                    caption="Aqui est√° seu relat√≥rio detalhado!")
            else:
                buffer = criar_relatorio_visual(df, hoje.month, hoje.year)
                receitas = df[df['tipo'] == 'receita']['total'].sum()
                despesas = df[df['tipo'] == 'despesa']['total'].sum()
                caption = (
                    f"üìä *Resumo de {meses[calendar.month_name[hoje.month]].capitalize()}*\n\n"
                    f"üí∞ Receitas Totais: {format_brl(receitas)}\n"
                    f"üí∏ Despesas Totais: {format_brl(despesas)}\n"
                    f"*{'üíö Saldo' if (receitas - despesas) >= 0 else '‚ù§Ô∏è Saldo'}: {format_brl(receitas - despesas)}*\n"
                )
                df_receitas = df[df['tipo'] == 'receita']
                if not df_receitas.empty:
                    caption += "\n------ *Receitas* ------\n"
                    for _, row in df_receitas.sort_values(
                            by='total', ascending=False).iterrows():
                        caption += f"üí∞ {row['categoria']}: {format_brl(row['total'])}\n"
                df_despesas = df[df['tipo'] == 'despesa']
                if not df_despesas.empty:
                    caption += "\n------ *Despesas* ------\n"
                    for _, row in df_despesas.sort_values(
                            by='total', ascending=False).iterrows():
                        caption += f"üí∏ {row['categoria']}: {format_brl(row['total'])}\n"
                await context.bot.send_photo(chat_id=query.message.chat_id,
                                             photo=buffer,
                                             caption=caption,
                                             parse_mode='Markdown')
        await query.delete_message()
        await show_main_menu(update, context)

    elif data == "orcamentos":
        keyboard = [[
            InlineKeyboardButton("üéØ Definir/Alterar",
                                 callback_data="orc_definir")
        ], [InlineKeyboardButton("üìã Ver Or√ßamentos", callback_data="orc_ver")],
                    [
                        InlineKeyboardButton("‚¨ÖÔ∏è Voltar ao Menu",
                                             callback_data="menu_principal")
                    ]]
        await query.edit_message_text(
            "Gerenciar or√ßamentos do *m√™s atual*:",
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode='Markdown')

    elif data == "confirmar_zerar":
        db.zerar_dados()
        await query.edit_message_text(
            "‚úÖ Todos os dados foram apagados com sucesso!")
        await show_main_menu(update,
                             context,
                             message_id=query.message.message_id)

    elif data == "orc_definir":
        categorias = db.get_categorias('despesa')
        keyboard = [[
            InlineKeyboardButton(f"{icone} {nome}",
                                 callback_data=f"orc_cat_{nome}")
        ] for nome, icone in categorias]
        keyboard.append(
            [InlineKeyboardButton("‚¨ÖÔ∏è Voltar", callback_data="orcamentos")])
        await query.edit_message_text(
            "Definir or√ßamento para qual categoria?",
            reply_markup=InlineKeyboardMarkup(keyboard))

    elif data.startswith("orc_cat_"):
        context.user_data.clear()
        context.user_data['message_id_to_edit'] = query.message.message_id
        categoria = data[8:]
        context.user_data['categoria_orcamento'] = categoria
        context.user_data['step'] = 'valor_orcamento'
        await query.edit_message_text(
            f"Or√ßamento para *{categoria}*.\n\nQual o valor limite mensal?",
            parse_mode='Markdown')

    elif data == "orc_ver":
        hoje = get_brazil_now()
        orcamentos = db.get_todos_orcamentos(hoje.month, hoje.year)
        if not orcamentos:
            await query.edit_message_text(
                "Nenhum or√ßamento definido para este m√™s.",
                reply_markup=InlineKeyboardMarkup(
                    [[
                        InlineKeyboardButton("üéØ Definir um Agora",
                                             callback_data="orc_definir")
                    ],
                     [
                         InlineKeyboardButton("‚¨ÖÔ∏è Voltar",
                                              callback_data="orcamentos")
                     ]]))
            return
        texto = f"üìã *Or√ßamentos de {meses[calendar.month_name[hoje.month]].capitalize()}*\n\n"
        keyboard = []
        for categoria, limite in orcamentos:
            _, gasto, disponivel, percentual = db.get_orcamento_status(
                categoria, hoje.month, hoje.year)
            barra = "‚ñ™" * int(
                percentual / 10) + "‚ñ´" * (10 - int(percentual / 10))
            status = "‚úÖ" if disponivel >= 0 else "üÜò"
            texto += f"*{categoria}* {status}\n`{barra}` {percentual:.1f}%\n"
            texto += f"Gasto: {format_brl(gasto)} de {format_brl(limite)}\n"
            texto += f"Sobra: {format_brl(disponivel)}\n\n"
            keyboard.append([
                InlineKeyboardButton(f"Ver Gastos de {categoria}",
                                     callback_data=f"orc_gastos_{categoria}")
            ])
        keyboard.append(
            [InlineKeyboardButton("‚¨ÖÔ∏è Voltar", callback_data="orcamentos")])
        await query.edit_message_text(
            texto,
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode='Markdown')

    elif data.startswith("orc_gastos_"):
        categoria = data[11:]
        hoje = get_brazil_now()
        transacoes = db.get_transacoes_por_categoria(categoria, hoje.month,
                                                     hoje.year)
        texto = f"üí∏ *Gastos em {categoria}*\n\n"
        if not transacoes:
            texto += "Nenhum gasto este m√™s."
        else:
            total = 0
            for data_t, desc, valor in transacoes:
                texto += f"_{format_date_br(data_t)}_: {desc} - *{format_brl(valor)}*\n"
                total += valor
            texto += f"\n*Total Gasto:* {format_brl(total)}"
        keyboard = [[
            InlineKeyboardButton("‚¨ÖÔ∏è Voltar aos Or√ßamentos",
                                 callback_data="orc_ver")
        ]]
        await query.edit_message_text(
            texto,
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode='Markdown')

    elif data.startswith("edit_tx_"):
        tx_id = int(data.split("_")[-1])
        tx = db.get_transacao(tx_id)
        if not tx:
            await query.edit_message_text("Transa√ß√£o n√£o encontrada. üòï",
                                          reply_markup=InlineKeyboardMarkup([[
                                              InlineKeyboardButton(
                                                  "‚¨ÖÔ∏è Voltar",
                                                  callback_data="extrato")
                                          ]]))
            return

        _id, _user, _tipo, _cat, _valor, _desc, _data, _created = tx
        context.user_data.clear()
        context.user_data['step'] = 'editar_valor_transacao'
        context.user_data['edit_tx_id'] = _id
        context.user_data['message_id_to_edit'] = query.message.message_id

        await query.edit_message_text(
            text=
            f"‚úèÔ∏è *Editar valor*\n\nCategoria: *{_cat}*\nData: *{format_date_br(_data)}*\nDescri√ß√£o: _{_desc}_\nValor atual: *{format_brl(_valor)}*\n\nüëâ Envie o *novo valor* (ex: 150,50):",
            parse_mode='Markdown')


async def data_button_handler(update: Update,
                              context: ContextTypes.DEFAULT_TYPE):
    """
    Handler para os bot√µes de sele√ß√£o de data.
    """
    query = update.callback_query
    await query.answer()
    data = query.data

    if data == "data_manual":
        context.user_data['step'] = 'data_manual_transacao'
        await query.edit_message_text(
            "Por favor, digite a data no formato **dd/mm/aaaa**:")
        return

    if data.startswith("data_"):
        date_str = data[5:]
        context.user_data['data_transacao'] = date_str
        context.user_data['data_insercao'] = get_brazil_now().strftime(
            '%Y-%m-%d')
        context.user_data['step'] = 'descricao_transacao'

        data_obj = datetime.strptime(date_str, '%Y-%m-%d')
        mes_nome = meses[calendar.month_name[data_obj.month]].capitalize()
        
        # AQUI: Apagando a mensagem com os bot√µes de data antes de enviar a pr√≥xima.
        message_id_to_edit = query.message.message_id
        if message_id_to_edit:
            try:
                await context.bot.delete_message(chat_id=query.message.chat_id,
                                                 message_id=message_id_to_edit)
            except Exception:
                pass

        sent_message = await context.bot.send_message(
            chat_id=query.message.chat_id,
            text=
            f"Data de Inser√ß√£o: *{format_date_br(context.user_data['data_insercao'])}* (Contabilizado para {mes_nome})\n\n"
            "Agora, uma breve descri√ß√£o:",
            parse_mode='Markdown')
        context.user_data['message_id_to_edit'] = sent_message.message_id


async def message_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    Handler para mensagens de texto.
    """
    user_id = update.effective_user.id
    if user_id not in AUTHORIZED_USERS:
        return

    step = context.user_data.get('step')
    if not step:
        await update.message.reply_text(
            "ü§î N√£o entendi. Por favor, use os bot√µes do menu ou digite /start para come√ßar."
        )
        return

    text = update.message.text
    chat_id = update.effective_chat.id
    message_id_to_edit = context.user_data.get('message_id_to_edit')

    try:
        await update.message.delete()
    except Exception:
        pass

    if step == 'valor_transacao':
        try:
            valor = float(text.replace('.', '').replace(',', '.'))
            context.user_data['valor_transacao'] = valor
            context.user_data['step'] = 'data_transacao'

            if message_id_to_edit:
                try:
                    await context.bot.delete_message(chat_id=chat_id,
                                                     message_id=message_id_to_edit)
                except Exception:
                    pass

            hoje = get_brazil_now()
            proximo_mes = hoje + relativedelta(months=1)
            dia_seguro = min(
                hoje.day,
                calendar.monthrange(proximo_mes.year, proximo_mes.month)[1])
            data_proximo_mes = datetime(proximo_mes.year, proximo_mes.month,
                                        dia_seguro)

            keyboard = [
                [
                    InlineKeyboardButton(
                        f"üìÖ M√™s Atual ({meses[calendar.month_name[hoje.month]].capitalize()})",
                        callback_data=
                        f"data_{hoje.year}-{hoje.month:02d}-{hoje.day:02d}")
                ],
                [
                    InlineKeyboardButton(
                        f"üóìÔ∏è M√™s Seguinte ({meses[calendar.month_name[proximo_mes.month]].capitalize()})",
                        callback_data=
                        f"data_{data_proximo_mes.year}-{data_proximo_mes.month:02d}-{data_proximo_mes.day:02d}"
                    )
                ],
                [
                    InlineKeyboardButton("‚úèÔ∏è Outra Data",
                                         callback_data="data_manual")
                ]
            ]
            sent_message = await context.bot.send_message(
                chat_id=chat_id,
                text=
                f"Valor: *{format_brl(valor)}*\n\nPara qual m√™s √© este lan√ßamento?",
                reply_markup=InlineKeyboardMarkup(keyboard),
                parse_mode='Markdown')
            context.user_data['message_id_to_edit'] = sent_message.message_id

        except (ValueError, AttributeError):
            await context.bot.send_message(
                chat_id=chat_id,
                text=
                "‚ùå Valor inv√°lido. Por favor, use apenas n√∫meros (ex: 150,50).")
        return

    if step == 'descricao_transacao':
        required_keys = [
            'tipo_transacao', 'categoria_transacao', 'valor_transacao',
            'data_transacao', 'data_insercao'
        ]
        if not all(key in context.user_data for key in required_keys):
            logging.error(
                f"Estado inv√°lido em 'descricao_transacao'. Dados: {context.user_data}"
            )
            await context.bot.send_message(
                chat_id=chat_id,
                text="üòï Ocorreu um erro e me perdi. Por favor, comece de novo."
            )
            context.user_data.clear()
            await show_main_menu(update, context)
            return

        descricao = text
        if message_id_to_edit:
            try:
                await context.bot.delete_message(chat_id=chat_id,
                                                 message_id=message_id_to_edit)
            except Exception:
                pass

        tx_id = db.add_transacao(user_id, context.user_data['tipo_transacao'],
                                 context.user_data['categoria_transacao'],
                                 context.user_data['valor_transacao'],
                                 descricao,
                                 context.user_data['data_transacao'])

        if not tx_id:
            feedback = "‚ö†Ô∏è Transa√ß√£o duplicada detectada! N√£o foi adicionada."
            await context.bot.send_message(chat_id=chat_id,
                                           text=feedback,
                                           parse_mode='Markdown')
        else:
            data_obj = datetime.strptime(context.user_data['data_transacao'],
                                         '%Y-%m-%d')
            mes_contabilizado = meses[calendar.month_name[
                data_obj.month]].capitalize()

            feedback = (
                f"{'üí∏' if context.user_data['tipo_transacao'] == 'despesa' else 'üí∞'} *Transa√ß√£o Registrada!*\n\n"
                f"Categoria: *{context.user_data['categoria_transacao']}*\n"
                f"Data: *{format_date_br(context.user_data['data_insercao'])}*\n"
                f"Contabilizado para: *{mes_contabilizado}*\n"
                f"Valor: *{format_brl(context.user_data['valor_transacao'])}*\n"
                f"Descri√ß√£o: _{descricao}_")

            keyboard = InlineKeyboardMarkup([[
                InlineKeyboardButton("‚úèÔ∏è Editar valor",
                                     callback_data=f"edit_tx_{tx_id}")
            ]])

            if context.user_data['tipo_transacao'] == 'despesa':
                data_obj = datetime.strptime(
                    context.user_data['data_transacao'], '%Y-%m-%d')
                _, _, _, percentual = db.get_orcamento_status(
                    context.user_data['categoria_transacao'], data_obj.month,
                    data_obj.year)
                alerta = get_alerta_divertido(
                    context.user_data['categoria_transacao'], percentual)
                if alerta:
                    feedback += f"\n\n{alerta}"

            await context.bot.send_message(chat_id=chat_id,
                                           text=feedback,
                                           reply_markup=keyboard,
                                           parse_mode='Markdown')

        context.user_data.clear()
        await show_main_menu(update, context)
        return

    if step == 'valor_orcamento':
        try:
            valor = float(text.replace('.', '').replace(',', '.'))
            categoria = context.user_data['categoria_orcamento']
            hoje = get_brazil_now()
            db.set_orcamento(categoria, valor, hoje.month, hoje.year)
            feedback = f"‚úÖ Or√ßamento de *{categoria}* definido para *{format_brl(valor)}*."
            keyboard = [[
                InlineKeyboardButton("üéØ Definir Outro Or√ßamento",
                                     callback_data="orc_definir")
            ],
                        [
                            InlineKeyboardButton("üìã Ver Todos os Or√ßamentos",
                                                 callback_data="orc_ver")
                        ],
                        [
                            InlineKeyboardButton(
                                "üè† Voltar ao Menu Principal",
                                callback_data="menu_principal")
                        ]]
            await context.bot.send_message(
                chat_id=chat_id,
                text=feedback,
                reply_markup=InlineKeyboardMarkup(keyboard),
                parse_mode='Markdown')
            context.user_data.clear()
        except (ValueError, AttributeError):
            await context.bot.send_message(
                chat_id=chat_id,
                text=
                "‚ùå Valor inv√°lido. Por favor, use apenas n√∫meros (ex: 800).")
        return

    if step == 'data_manual_transacao':
        try:
            data_obj = datetime.strptime(text, '%d/%m/%Y')
            context.user_data['data_transacao'] = data_obj.strftime('%Y-%m-%d')
            context.user_data['data_insercao'] = get_brazil_now().strftime(
                '%Y-%m-%d')
            context.user_data['step'] = 'descricao_transacao'

            mes_nome = meses[calendar.month_name[data_obj.month]].capitalize()

            await context.bot.edit_message_text(
                chat_id=chat_id,
                message_id=message_id_to_edit,
                text=
                f"Data de Inser√ß√£o: *{format_date_br(context.user_data['data_insercao'])}* (Contabilizado para {mes_nome})\n\nAgora, uma breve descri√ß√£o:",
                parse_mode='Markdown')
        except ValueError:
            await context.bot.send_message(
                chat_id=chat_id,
                text=
                "‚ùå Formato de data inv√°lido. Por favor, use **dd/mm/aaaa** (ex: 31/08/2025)."
            )
        return

    if step == 'editar_valor_transacao':
        try:
            novo_valor = float(text.replace('.', '').replace(',', '.'))
            tx_id = context.user_data.get('edit_tx_id')
            sucesso = db.update_transacao_valor(tx_id, novo_valor)
            if not sucesso:
                raise ValueError("Falha ao atualizar")

            await context.bot.send_message(
                chat_id=chat_id,
                text=
                f"‚úÖ Valor atualizado com sucesso para *{format_brl(novo_valor)}*!",
                parse_mode='Markdown',
                reply_markup=InlineKeyboardMarkup(
                    [[
                        InlineKeyboardButton("üîÑ Ver Extrato Atualizado",
                                             callback_data="extrato")
                    ],
                     [
                         InlineKeyboardButton("üè† Menu Principal",
                                              callback_data="menu_principal")
                     ]]))
            context.user_data.clear()

        except (ValueError, TypeError):
            await context.bot.send_message(
                chat_id=chat_id,
                text=
                "‚ùå Valor inv√°lido. Tente novamente (ex: 150,50) ou toque para cancelar.",
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("‚ùå Cancelar", callback_data="extrato")
                ]]))
        return


async def command_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.delete()
    await show_main_menu(update, context)


async def post_init(application: Application):
    await application.bot.set_my_commands([
        BotCommand("start", "‚ñ∂Ô∏è Iniciar e ver o menu"),
        BotCommand("gastou", "üí∏ Lan√ßar nova despesa"),
        BotCommand("ganhou", "üí∞ Lan√ßar nova receita"),
        BotCommand("saldo", "üìã Ver saldo do m√™s"),
        BotCommand("relatorio", "üìä Gerar um relat√≥rio"),
        BotCommand("orcamento", "üéØ Gerenciar or√ßamentos"),
        BotCommand("zerar", "üóëÔ∏è Apagar todos os dados"),
    ])


def run_bot():
    """Fun√ß√£o para rodar o bot do Telegram"""
    application = Application.builder().token(TOKEN).post_init(
        post_init).build()

    application.add_handler(CommandHandler("start", start_command))
    application.add_handler(CommandHandler("zerar", zerar_command))
    application.add_handler(
        CommandHandler(["gastou", "ganhou", "saldo", "relatorio", "orcamento"],
                       command_handler))

    # Handlers para bot√µes
    application.add_handler(
        CallbackQueryHandler(data_button_handler,
                             pattern="^(data_manual|data_).+"))
    application.add_handler(
        CallbackQueryHandler(generic_button_handler,
                             pattern="^(?!data_manual|data_).+"))
    application.add_handler(
        MessageHandler(filters.TEXT & ~filters.COMMAND, message_handler))

    print("ü§ñ Bot assistente financeiro v13.3 (com servidor web) iniciado!")
    application.run_polling()


def run_web_server():
    """Fun√ß√£o para rodar o servidor web Flask"""
    port = int(os.environ.get('PORT', 5000))
    print(f"üåê Servidor web iniciado na porta {port}")
    app.run(host='0.0.0.0', port=port, debug=False)


def main():
    """Fun√ß√£o principal que inicia tanto o bot quanto o servidor web"""
    print("üöÄ Iniciando aplica√ß√£o h√≠brida (Bot + Servidor Web)...")

    # Inicia o servidor web em uma thread separada
    web_thread = threading.Thread(target=run_web_server, daemon=True)
    web_thread.start()

    # Inicia o bot na thread principal
    run_bot()


if __name__ == '__main__':
    main()
